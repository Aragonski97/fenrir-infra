# inspiration from https://github.com/conduktor/kafka-stack-docker-compose/blob/master/full-stack.yml

version: '3'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.8.0
    hostname: zookeeper
    ports:
      - target: 2181
        published: 10000
        mode: host
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    volumes:
      - $FENRIR_ROOT_DIR/kafka/volumes/zookeeper/data:/var/lib/zookeeper/data
      - $FENRIR_ROOT_DIR/kafka/volumes/zookeeper/logs:/var/lib/zookeeper/log
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.kafka == true
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s
        window: 120s
      update_config:
        order: start-first
        parallelism: 1
        delay: 5s
        failure_action: rollback
        monitor: 5s
    networks:
      - internal_network

  zoonavigator:
    image: elkozmon/zoonavigator:1.1.3
    hostname: zoonavigator
    ports:
      - target: 8000
        published: 10001
    environment:
      HTTP_PORT: 8000
      AUTO_CONNECT_CONNECTION_STRING: zookeeper:2181
    depends_on:
      - zookeeper
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.kafka == true
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s
        window: 120s
      update_config:
        order: start-first
        parallelism: 1
        delay: 5s
        failure_action: rollback
        monitor: 5s
    networks:
      - internal_network

  kafka:
    image: confluentinc/cp-kafka:7.8.0
    hostname: kafka
    ports:
      - target: 9092
        published: 9092
        mode: host
      - target: 29092
        published: 10004
        mode: host
      - target: 9999
        published: 10005
        mode: host
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:10003,EXTERNAL://${TSC_IP}:9092,DOCKER://host.docker.internal:10004
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_MAX_REQUEST_SEIZE: "5242880"
      KAFKA_MESSAGE_MAX_BYTES: "5242880"
      KAFKA_MAX_PARTITION_FETCH_BYTES: "5242880"
    depends_on:
      - zookeeper
      - zoonavigator
    volumes:
      - $FENRIR_ROOT_DIR/kafka/volumes/broker-0/data:/var/lib/kafka/data
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.kafka == true
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s
        window: 120s
      update_config:
        order: start-first
        parallelism: 1
        delay: 5s
        failure_action: rollback
        monitor: 5s
    networks:
      - internal_network

  schema-registry:
    image: confluentinc/cp-schema-registry:7.8.0
    hostname: schema-registry
    ports:
      - target: 8081
        published: 10006
        mode: host
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:10003
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
      - kafka
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.kafka == true
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s
        window: 120s
      update_config:
        order: start-first
        parallelism: 1
        delay: 5s
        failure_action: rollback
        monitor: 5s
    networks:
      - internal_network

  rest-proxy:
    image: confluentinc/cp-kafka-rest:7.8.0
    hostname: rest-proxy
    ports:
      - target: 8082
        published: 10007
        mode: host
    environment:
      KAFKA_REST_LISTENERS: 'http://0.0.0.0:8082/'
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      KAFKA_REST_HOST_NAME: rest-proxy
#     KAFKA_REST_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:10003
      KAFKA_REST_BOOTSTRAP_SERVERS: kafka:10003
    depends_on:
      - kafka
      - schema-registry
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.kafka == true
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s
        window: 120s
      update_config:
        order: start-first
        parallelism: 1
        delay: 5s
        failure_action: rollback
        monitor: 5s
    networks:
      - internal_network

    networks:
      - internal_network

  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.8.0
    hostname: kafka-connect
    ports:
      - target: 8083
        published: 10008
        mode: host
    volumes:
      - $FENRIR_ROOT_DIR/kafka/volumes/connect/jars:/etc/kafka-connect/jars/
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:10003
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: fenrir-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: fenrir-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: fenrir-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: fenrir-connect-status
      CONNECT_KEY_CONVERTER: 'org.apache.kafka.connect.storage.StringConverter'
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_VALUE_CONVERTER: 'io.confluent.connect.json.JsonSchemaConverter'
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: 'org.apache.kafka.connect.storage.StringConverter'
      CONNECT_INTERNAL_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_REST_ADVERTISED_HOST_NAME: 'kafka-connect'
      CONNECT_LOG4J_ROOT_LOGLEVEL: 'INFO'
      CONNECT_LOG4J_LOGGERS: 'org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR'
      CONNECT_PLUGIN_PATH: '/usr/share/java,/etc/kafka-connect/jars,/usr/share/confluent-hub-components/'
      CONNECT_REPLICATION_FACTOR: 1
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
    depends_on:
      - kafka
      - schema-registry
      - rest-proxy
    command:
      - bash
      - -c
      - |
        confluent-hub install --no-prompt debezium/debezium-connector-mysql:2.2.1
        confluent-hub install --no-prompt debezium/debezium-connector-postgres:2.2.1
        confluent-hub install --no-prompt confluentinc/kafka-connect-datagen:0.4.0
        confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:latest
        confluent-hub install --no-prompt confluentinc/kafka-connect-elasticsearch:14.0.7
        confluent-hub install --no-prompt jcustenborder/kafka-connect-transform-common:latest
        confluent-hub install --no-prompt jcustenborder/kafka-connect-transform-common:latest
        /etc/confluent/docker/run
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.kafka == true
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
    networks:
      - internal_network

  ksqldb:
    image: confluentinc/cp-ksqldb-server:7.8.0
    hostname: ksqldb
    ports:
      - target: 8088
        published: 10010
        mode: host
    volumes:
      - $FENRIR_ROOT_DIR/kafka/volumes/connect/jars:/etc/kafka-connect/jars/'
    environment:
      KSQL_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:10003
      KSQL_KSQL_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      KSQL_KSQL_CONNECT_URL: 'http://kafka-connect:8083'
      KSQL_LISTENERS: http://0.0.0.0:8088/
      KSQL_KSQL_SERVICE_ID: ksqldb_
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_INTERNAL_TOPIC_REPLICAS: 1
      KSQL_INTERNAL_TOPIC_MIN_INSYNC_REPLICAS: 1
    depends_on:
      - zookeeper
      - kafka
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.kafka == true
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s
        window: 120s
      update_config:
        order: start-first
        parallelism: 1
        delay: 5s
        failure_action: rollback
        monitor: 5s
    networks:
      - internal_network

  kafdrop:
    image: obsidiandynamics/kafdrop:4.1.0
    hostname: kafdrop
    ports:
      - target: 9000
        published: 10009
        mode: host
    environment:
      KAFKA_BROKERCONNECT: 'kafka:10003'
    depends_on:
      - kafka
      - schema-registry
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.kafka == true
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s
        window: 120s
      update_config:
        order: start-first
        parallelism: 1
        delay: 5s
        failure_action: rollback
        monitor: 5s
    networks:
      - internal_network

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    hostname: kafka-ui
    ports:
      - target: 8080
        published: 10011
        mode: host
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:10003
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - KAFKA_CLUSTERS_0_SCHEMAREGISTRY=http://schema-registry:8081
      - KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME=axiom-cluster
      - KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS=http://kafka-connect:8083
      - KAFKA_CLUSTERS_0_KSQLDBSERVER=http://ksqldb:8088
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.kafka == true
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s
        window: 120s
      update_config:
        order: start-first
        parallelism: 1
        delay: 5s
        failure_action: rollback
        monitor: 5s
    networks:
      - internal_network

networks:
  internal_network:
    name: $FENRIR_DOCKER_NETWORK
    driver: overlay
    attachable: true
    external: true
